[build-system]
requires = ["setuptools>=67.0", "wheel>=0.40", "pip>=23.0"]
build-backend = "setuptools.build_meta"

[project]
name = "auto-secrets-manager"
dynamic = ["version"]
description = "Automatic environment secrets management based on git branches"
readme = "README.md"
license = { text = "MIT" }
authors = [{ name = "Auto Secrets Manager Team" }]
keywords = [
  "secrets",
  "management",
  "devcontainer",
  "git",
  "branches",
  "environment",
  "variables",
  "infisical",
  "devcontainer-feature",
]
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Developers",
  "Intended Audience :: System Administrators",
  "License :: OSI Approved :: MIT License",
  "Operating System :: POSIX :: Linux",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Unix Shell",
  "Topic :: Software Development :: Build Tools",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: System :: Systems Administration",
  "Topic :: Security",
  "Topic :: Security :: Cryptography",
]
requires-python = ">=3.9"
dependencies = [
  "requests>=2.31.0",
  "cryptography>=41.0.0",
  "infisicalsdk>=1.0.9",
  "paramiko>=4.0.0",
]

[project.optional-dependencies]
aws = ["boto3>=1.34.0"]
azure = ["azure-keyvault>=4.2.0"]
gcp = ["google-cloud-secret-manager>=2.18.0"]
all = [
  "boto3>=1.34.0",
  "azure-keyvault>=4.2.0",
  "google-cloud-secret-manager>=2.18.0",
]
dev = [
  "pytest>=7.4.0",
  "pytest-cov>=4.1.0",
  "pytest-mock>=3.11.0",
  "pytest-asyncio>=0.21.0",
  "coverage>=7.3.0",
  "ruff>=0.1.0",
  "mypy>=1.5.0",
  "pre-commit>=3.4.0",
  "tox>=4.11.0",
  "types-setuptools>=80.9.0.20250801",
  "types-paramiko>=4.0.0.20250809",
]
docs = ["sphinx>=7.1.0", "sphinx-rtd-theme>=1.3.0"]

[project.scripts]
auto-secrets = "auto_secrets.cli:main"
auto-secrets-supervisor = "auto_secrets.supervisor:main"

[tool.setuptools.dynamic]
version = { attr = "auto_secrets.__version__" }

[tool.setuptools.packages.find]
where = ["."]

[tool.setuptools.package-dir]
"" = "."

[tool.setuptools.package-data]
auto_secrets = ["py.typed"]

[tool.ruff]
target-version = "py39"
line-length = 120
indent-width = 2

[tool.ruff.lint]
select = [
  "E",   # pycodestyle errors
  "W",   # pycodestyle warnings
  "F",   # pyflakes
  "I",   # isort
  "B",   # flake8-bugbear
  "C4",  # flake8-comprehensions
  "UP",  # pyupgrade
  "SIM", # flake8-simplify
]
ignore = [
  "E501", # line too long, handled by black
  "B008", # do not perform function calls in argument defaults
  "C901", # too complex
]

[tool.ruff.lint.isort]
known-first-party = ["auto_secrets"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

addopts = [
  "--verbose",
  "--tb=short",
  "--strict-markers",
  "--strict-config",
  "--disable-warnings",
  "--color=yes",
  "--durations=10",
  "--cov=auto_secrets",
  "--cov-report=term-missing",
  "--cov-report=html:../.test_reports/htmlcov",
  "--cov-report=xml:../.test_reports/coverage.xml",
  "--cov-branch",
  "--cov-fail-under=75",
]

markers = [
  "unit: Unit tests",
  "integration: Integration tests",
  "slow: Slow running tests",
  "network: Tests that require network access",
  "git: Tests that require git repository",
  "shell: Tests that require shell integration",
  "security: Security-related tests",
]

filterwarnings = [
  "ignore::DeprecationWarning",
  "ignore::PendingDeprecationWarning",
  "ignore::UserWarning:pytest_cov",
  "ignore::pytest.PytestUnraisableExceptionWarning",
]

# Ignore patterns
norecursedirs = [
  "build",
  "dist",
  ".git",
  ".tox",
  "venv",
  ".venv",
  "__pycache__",
]

# Logging
log_cli = false
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "tests/pytest.log"
log_file_level = "DEBUG"
log_file_format = "%(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s"
log_file_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
source = ["."]
branch = true

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "def __repr__",
  "if self.debug:",
  "if settings.DEBUG",
  "raise AssertionError",
  "raise NotImplementedError",
  "if 0:",
  "if __name__ == .__main__.:",
  "class .*\\bProtocol\\):",
  "@(abc\\.)?abstractmethod",
]

omit = [
  "auto_secrets/daemon.py",
  "auto_secrets/key_master.py",
  "auto_secrets/supervisor.py",
]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py39,py310,py311,py312,lint,type-check

isolated_build = true
[testenv]
deps =
    pytest
    pytest-cov
    pytest-mock
    pytest-asyncio
commands = pytest {posargs}

[testenv:lint]
deps = ruff
commands =
    ruff check .
ruff format --check .

[testenv:type-check]
deps =
    mypy
    types-setuptools
commands = mypy .
"""
